# -*- coding: utf-8 -*-
"""model.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U49jew1FW3Y7RSGplKBVlIBw9wFc7N-x
"""

import torch.nn as nn
import torch.nn.functional as F

def initialize_parameters(m):
    """
    Initializes the parameters of a given layer.

    Args:
        m (nn.Module): A PyTorch layer.

    Returns:
        None
    """
    if isinstance(m, nn.Conv2d):
        nn.init.kaiming_normal_(m.weight.data, nonlinearity='relu')
        nn.init.constant_(m.bias.data, 0)
    elif isinstance(m, nn.Linear):
        nn.init.xavier_normal_(m.weight.data, gain=nn.init.calculate_gain('relu'))
        nn.init.constant_(m.bias.data, 0)

def count_parameters(model):
    """
    Counts the number of trainable parameters in a model.

    Args:
        model (nn.Module): A PyTorch model.

    Returns:
        int: The number of trainable parameters.
    """
    return sum(p.numel() for p in model.parameters() if p.requires_grad)

class CNN(nn.Module):
    """
    Convolutional Neural Network (CNN) model for image classification.

    Args:
        grayscale (bool): If True, the input images are grayscale, otherwise they are RGB.
    """
    def __init__(self, gray_scale=False):
        super(CNN, self).__init__()
        in_channels = 1 if gray_scale else 3
        self.conv1 = nn.Conv2d(in_channels, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1)
        self.conv4 = nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1)
        self.pool = nn.MaxPool2d(2)
        self.fc1 = nn.Linear(256 * 7 * 7, 512)
        self.fc2 = nn.Linear(512, 64)
        self.fc3 = nn.Linear(64, 38)

    def forward(self, x):
        """
        Defines the forward pass of the CNN.

        Args:
            x (Tensor): Input tensor.

        Returns:
            Tensor: Output predictions.
        """
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = self.pool(F.relu(self.conv3(x)))
        x = self.pool(F.relu(self.conv4(x)))
        x = x.view(-1, 256 * 7 * 7)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x